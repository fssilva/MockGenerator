// swiftlint:disable all

@testable import {{ argument.productName }}
{% for dependency in argument.dependencies %}
  import {{dependency}}
{%endfor%}

{% macro swiftifyMethodName name %}{{ name | replace:"(","_" | replace:")","" | replace:":","_" | replace:"`","" | snakeToCamelCase | lowerFirstWord }}{% endmacro %}

{% macro methodThrowableErrorDeclaration method %}
  var {% call swiftifyMethodName method.selectorName %}ThrowableError: Error?
{% endmacro %}

{% macro methodThrowableErrorUsage method %}
  if let error = {% call swiftifyMethodName method.selectorName %}ThrowableError {
  throw error
  }
{% endmacro %}

{% macro methodReceivedParameters method %}
  {%if method.parameters.count == 1 %}
  {% call swiftifyMethodName method.selectorName %}ReceivedArguments.append( {{method.parameters.first.name}} )
  {% else %}
    {% if not method.parameters.count == 0 %}
      {% call swiftifyMethodName method.selectorName %}ReceivedArguments.append( ({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %}))
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro typeForMethod method %}{% for param in method.parameters %}{{ param.name|upperFirstLetter }}: {% if param.isClosure %}({% endif %}{% if method|annotated:"Generic" %}Any{% else %}{{ param.typeName.unwrappedTypeName }}{% endif %}{% if param.isClosure %}){% endif %}?{% endfor %}{% endmacro %}

{######## CLASS ###########}

{% macro mockClassMethod method %}
  //MARK: - {{ method.shortName }}

  {% if method.throws %}
    {% call methodThrowableErrorDeclaration method %}
  {% endif %}
  
  {% if method.parameters.count == 1 %}
    var {% call swiftifyMethodName method.selectorName %}ReceivedArguments: [{% if method.parameters.first.typeAttributes.escaping %}{{ method.parameters.first.unwrappedTypeName }}{% else %}{{ method.parameters.first.typeName }}{% endif %}] = []
  {% else %}
    {% if not method.parameters.count == 0 %}
      var {% call swiftifyMethodName method.selectorName %}ReceivedArguments: [({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})] = []
    {% endif %}
  {% endif %}
      
  {% if not method.returnTypeName.isVoid and not method.isInitializer %}
      var {% call swiftifyMethodName method.selectorName %}ReturnValue: {{ method.returnTypeName }}{% if not method.isOptionalReturnType %}!{% endif %}
  {% endif %}
  
  {% if not method.isInitializer %}
    var {% call swiftifyMethodName method.selectorName %}CallsCount = 0
    var {% call swiftifyMethodName method.selectorName %}WasCalled: Bool {
    return {% call swiftifyMethodName method.selectorName %}CallsCount > 0
    }
  {% endif %}
  
  {% if method.isInitializer %}
    override required {{ method.name }} {
      super.init({% for param in method.parameters %}{{ param.name }}: {{ param.name }}{% if not forloop.last%}, {% endif %}{% endfor %})
      {% call methodReceivedParameters method %}
    }
  {% else %}
    override func {{ method.name }}{% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
    {% if method.throws %}
      {% call methodThrowableErrorUsage method %}
    {% endif %}
    
    {% call swiftifyMethodName method.selectorName %}CallsCount += 1
    {% call methodReceivedParameters method %}
    
    {% if not method.returnTypeName.isVoid %}
      return {% call swiftifyMethodName method.selectorName %}ReturnValue
    {% endif %}
    }
  {% endif %}
{% endmacro %}

{######## PROTOCOL ###########}

{% macro typeForParamReceivedArgument param %} 
  {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}
{% endmacro %}

{% macro mockProtocolMethod method %}
  //MARK: - {{ method.shortName }}

  {% if method.throws %}
    {% call methodThrowableErrorDeclaration method %}
  {% endif %}
  
  {% if method.parameters.count == 1 %}
    var {% call swiftifyMethodName method.selectorName %}ReceivedArguments: [{% if method.parameters.first.typeAttributes.escaping %}{{ method.parameters.first.unwrappedTypeName }}{% else %}{{ method.parameters.first.typeName }}{% endif %}] = []
  {% else %}
    {% if not method.parameters.count == 0 %}
      var {% call swiftifyMethodName method.selectorName %}ReceivedArguments: [({% for param in method.parameters %}{{ param.name }}: {% if param.typeAttributes.escaping %}{{ param.unwrappedTypeName }}{% else %}{{ param.typeName }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})] = []
    {% endif %}
  {% endif %}
      
  {% if not method.returnTypeName.isVoid and not method.isInitializer %}
      var {% call swiftifyMethodName method.selectorName %}ReturnValue: {{ method.returnTypeName }}{% if not method.isOptionalReturnType %}!{% endif %}
  {% endif %}
  
  {% if not method.isInitializer %}
    var {% call swiftifyMethodName method.selectorName %}CallsCount = 0
    var {% call swiftifyMethodName method.selectorName %}WasCalled: Bool {
    return {% call swiftifyMethodName method.selectorName %}CallsCount > 0
    }
  {% endif %}
  
  {% if method.isInitializer %}
    required {{ method.name }} {
    {% call methodReceivedParameters method %}
    }
  {% else %}
    func {{ method.name }}{% if method.throws %} throws{% endif %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
    {% if method.throws %}
      {% call methodThrowableErrorUsage method %}
    {% endif %}
    
    {% call swiftifyMethodName method.selectorName %}CallsCount += 1
    {% call methodReceivedParameters method %}
    
    {% if not method.returnTypeName.isVoid %}
      return {% call swiftifyMethodName method.selectorName %}ReturnValue
    {% endif %}
    }
  {% endif %}
{% endmacro %}

{% macro mockOptionalVariable variable %}
  var {% call mockedVariableName variable %}: {{ variable.typeName }}
{% endmacro %}

{% macro mockNonOptionalArrayOrDictionaryVariable variable %}
  var {% call mockedVariableName variable %}: {{ variable.typeName }} = {% if variable.isArray %}[]{% elif variable.isDictionary %}[:]{% endif %}
{% endmacro %}

{% macro mockNonOptionalVariable variable %}
  var {% call underlyingMockedVariableName variable %}: {{ variable.typeName }}?
  var {% call mockedVariableName variable %}: {{ variable.typeName }} = {{ variable.typeName }}() {
    didSet {
      {% call underlyingMockedVariableName variable %} = {% call mockedVariableName variable %}
    }
  }
{% endmacro %}

{% macro underlyingMockedVariableName variable %}set{{ variable.name|upperFirstLetter }}Param{% endmacro %}
{% macro mockedVariableName variable %}{{ variable.name }}{% endmacro %}

{% for type in types.protocols where type|annotated:"Mock" %}
  // ======================== {{ type.name }} ========================

  class {{ type.name }}Mock: {{ type.name }} {
  {% for variable in type.allVariables|!definedInExtension %}
    {% if variable.isOptional %}
      {% call mockOptionalVariable variable %}
    {% elif variable.isArray or variable.isDictionary %}
      {% call mockNonOptionalArrayOrDictionaryVariable variable %}
    {% else %}
      {% call mockNonOptionalVariable variable %}
    {% endif %}
  {% endfor %}

  {% for method in type.allMethods|!definedInExtension %}
      {% call mockProtocolMethod method %}
  {% endfor %}
  }
{% endfor %}

{% for type in types.classes where type|annotated:"Mock" %}
  // ======================== {{ type.name }} ========================

  class {{ type.name }}Mock: {{ type.name }} {

  {% for method in type.allMethods|!definedInExtension|!private|!initializer %}
    {% call mockClassMethod method %}
  {% endfor %}
  }
{% endfor %}